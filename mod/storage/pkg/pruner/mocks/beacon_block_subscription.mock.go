// Code generated by mockery v2.44.1. DO NOT EDIT.

package mocks

import (
	context "context"

	pruner "github.com/berachain/beacon-kit/mod/storage/pkg/pruner"
	mock "github.com/stretchr/testify/mock"
)

// BeaconBlockSubscription is an autogenerated mock type for the BeaconBlockSubscription type
type BeaconBlockSubscription[BeaconBlockT pruner.BeaconBlock, BlockEventT pruner.BlockEvent[BeaconBlockT]] struct {
	mock.Mock
}

type BeaconBlockSubscription_Expecter[BeaconBlockT pruner.BeaconBlock, BlockEventT pruner.BlockEvent[BeaconBlockT]] struct {
	mock *mock.Mock
}

func (_m *BeaconBlockSubscription[BeaconBlockT, BlockEventT]) EXPECT() *BeaconBlockSubscription_Expecter[BeaconBlockT, BlockEventT] {
	return &BeaconBlockSubscription_Expecter[BeaconBlockT, BlockEventT]{mock: &_m.Mock}
}

// Listen provides a mock function with given fields: ctx, fn
func (_m *BeaconBlockSubscription[BeaconBlockT, BlockEventT]) Listen(ctx context.Context, fn func(BlockEventT)) {
	_m.Called(ctx, fn)
}

// BeaconBlockSubscription_Listen_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Listen'
type BeaconBlockSubscription_Listen_Call[BeaconBlockT pruner.BeaconBlock, BlockEventT pruner.BlockEvent[BeaconBlockT]] struct {
	*mock.Call
}

// Listen is a helper method to define mock.On call
//   - ctx context.Context
//   - fn func(BlockEventT)
func (_e *BeaconBlockSubscription_Expecter[BeaconBlockT, BlockEventT]) Listen(ctx interface{}, fn interface{}) *BeaconBlockSubscription_Listen_Call[BeaconBlockT, BlockEventT] {
	return &BeaconBlockSubscription_Listen_Call[BeaconBlockT, BlockEventT]{Call: _e.mock.On("Listen", ctx, fn)}
}

func (_c *BeaconBlockSubscription_Listen_Call[BeaconBlockT, BlockEventT]) Run(run func(ctx context.Context, fn func(BlockEventT))) *BeaconBlockSubscription_Listen_Call[BeaconBlockT, BlockEventT] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(func(BlockEventT)))
	})
	return _c
}

func (_c *BeaconBlockSubscription_Listen_Call[BeaconBlockT, BlockEventT]) Return() *BeaconBlockSubscription_Listen_Call[BeaconBlockT, BlockEventT] {
	_c.Call.Return()
	return _c
}

func (_c *BeaconBlockSubscription_Listen_Call[BeaconBlockT, BlockEventT]) RunAndReturn(run func(context.Context, func(BlockEventT))) *BeaconBlockSubscription_Listen_Call[BeaconBlockT, BlockEventT] {
	_c.Call.Return(run)
	return _c
}

// NewBeaconBlockSubscription creates a new instance of BeaconBlockSubscription. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewBeaconBlockSubscription[BeaconBlockT pruner.BeaconBlock, BlockEventT pruner.BlockEvent[BeaconBlockT]](t interface {
	mock.TestingT
	Cleanup(func())
}) *BeaconBlockSubscription[BeaconBlockT, BlockEventT] {
	mock := &BeaconBlockSubscription[BeaconBlockT, BlockEventT]{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
